
        
        # Parse path (filepath) URI: more sophistic path logic to come (pulling from S3, external mounts, etc!!!!)
        # For instance, if it was like s3://bucket/test.dcm, this should pull the dicom to a temporary directory and set .path to that dir
        # This also might be dependent on filetype
        # Checks:
            # If like file:/path/to.dcm, strip file:
            # Else, just return path
        # TODO: change 'path' field to 'filepath_uri"?
             # if "data" in node.properties.keys(): 
        

        #     path = node.properties["path"]
        #     if path.split(":")[0] == "file":
        #         node.path = pathlib.Path(path.split(":")[-1])
        #     else:
        #         node.path = pathlib.Path(path)
            
        #     node.static_path = str(node.path)
        
        #     # Output and check
        #     self.logger.info ("Resolved %s -> %s", node.properties["path"], node.path)

        #     # Check that we got it right, and this path is readable on the host system
        #     if not os.path.exists(node.path):
        #         raise RuntimeError("Invalid pathspec", node.path)
        #     self.logger.info ("Filepath is valid: %s", os.path.exists(node.path))

        # if "file" in node.properties.keys(): 

        #     node.file = pathlib.Path(node.properties["file"])
            
        #     node.static_file = str(node.file)
        
        #     # Output and check
        #     self.logger.info ("Resolved %s -> %s", node.properties["file"], node.static_file)

        #     # Check that we got it right, and this path is readable on the host system
        #     if not os.path.exists(node.file):
        #         raise RuntimeError("Invalid filespec", node.file)
        #     self.logger.info ("File object is valid: %s", os.path.exists(node.file))
        # if "path" in node.properties.keys() and self.params.get("OBJECT_STORE_ENABLED", False):
        #     node.properties['object_bucket'] = f"{self._bucket_id}"
        #     node.properties['object_folder'] = f"{self._name}/{node.name}"
        #     for path in pathlib.Path(node.properties['path']).glob("*"): node.objects.append(path)        
        #     self.logger.info ("Node has %s pending object commits",  len(node.objects))

        # if "file" in node.properties.keys() and self.params.get("OBJECT_STORE_ENABLED", False):
        #     node.properties['object_bucket'] = f"{self._bucket_id}"
        #     node.properties['object_folder'] = f"{self._name}/{node.name}"
        #     node.objects.append(pathlib.Path(node.properties['file']))
        #     self.logger.info ("Node has %s pending object commits",  len(node.objects))
