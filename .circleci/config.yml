version: 2.1

# ideas for the future:
# @todo https://circleci.com/docs/2.0/workflows/
# @todo https://github.com/features/actions (github actions are similar to circleci and works for also forked repos)
# docker-compose integration testing in circleci
# kubernetes deploy and integration test
# usecase focussed integration tests if code changes frequently

# Note: to edit context and environment variables, see Organization Settings https://app.circleci.com/settings/organization/github/msk-mind/contexts
parameters:
  run_workflow_build_and_test:
    type: boolean
    default: true
  run_workflow_docker:
    type: boolean
    default: false

orbs:
  codecov: codecov/codecov@1.0.2

jobs:
  build:
    parallelism: 3
    docker:
      - image: mambaorg/micromamba:1.0.0
        user: root
    working_directory: ~/repo
    steps:
      # step 1: obtain repo from github
      - checkout
      # step 2: install required packages
      - run: apt-get update
      - run: apt-get install -y build-essential libgdal-dev liblapack-dev libblas-dev gfortran libgl1 git curl
      - restore_cache: # restores saved dependency cache
          key: &deps1-cache deps1-{{ .Branch }}-{{ checksum "environment.yml" }}-{{ checksum "poetry.lock" }}-{{ checksum "pyproject.toml" }}
      # step 3: create virtual env
      - run:
          command: |
            if [ ! -d ./venv ]; then
              micromamba create -y -p ./venv -f environment.yml
              . ./venv/bin/activate
              poetry export --without-hashes -f requirements.txt --dev  | SETUPTOOLS_USE_DISTUTILS=stdlib pip install --no-deps -r /dev/stdin
            fi
      - save_cache:
          key: *deps1-cache
          paths:
            - "venv"
      # step 4: build project
      - run:
          command: |
            . ./venv/bin/activate
            poetry config virtualenvs.create false
            poetry build
            pip install --no-deps dist/*.whl
      # step 5: run tests
      - run:
          name: Run tests
          command: |
            . ./venv/bin/activate
            export LUNA_HOME=$PWD
            cp conf/logging.default.yml conf/logging.cfg
            TEST_FILES=$(circleci tests glob "tests/**/test_*.py" | circleci tests split --split-by=timings)
            pytest -v --capture=tee-sys --show-capture=all $TEST_FILES --cov-report=xml --junitxml=./luna-tests/results.xml
      - store_artifacts:
          path: htmlcov
      - store_test_results:
          path: luna-tests
      - codecov/upload:
          file: coverage.xml

  # https://circleci.com/docs/2.0/building-docker-images/
  docker_build:
    machine: true
    steps:
      - checkout
      - run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - run: docker build -t $DOCKER_ORG/luna:${CIRCLE_SHA1} .
      - run: docker tag $DOCKER_ORG/luna:${CIRCLE_SHA1} $DOCKER_ORG/luna:latest
      - run: docker push $DOCKER_ORG/luna:${CIRCLE_SHA1}

workflows:
  version: 2
  build_and_test:
    when: << pipeline.parameters.run_workflow_build_and_test >>
    jobs:
      - build:
          context:
            - MIND-Data-Processing

  build_docker:
    when: << pipeline.parameters.run_workflow_docker >>
    jobs:
      - docker_build:
          context:
            - MIND-Data-Processing
