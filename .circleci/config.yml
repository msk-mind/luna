version: 2.1

# ideas for the future:
# @todo https://circleci.com/docs/2.0/workflows/
# @todo https://github.com/features/actions (github actions are similar to circleci and works for also forked repos)
# docker-compose integration testing in circleci
# kubernetes deploy and integration test
# usecase focussed integration tests if code changes frequently
parameters:
  run_workflow_test:
    type: boolean
    default: true
  run_workflow_docker:
    type: boolean
    default: false

orbs:
  codecov: codecov/codecov@1.0.2

jobs:
  test:
    parallelism: 3
    docker:
      - image: $DOCKER_USERNAME/luna-dev:latest  # primary container for the build job

    steps:
      - checkout
      - run: cat /etc/os-release
      - run: java -version
      - run: which java
      - run: echo "export PATH=/home/circleci/.local/bin:$PATH" >> $BASH_ENV  # some python packages get installed  here
      - run: echo "export CODECOV_TOKEN="4d2ae912-4489-4e40-ac13-02add6c0d1a6"" >> $BASH_ENV
      - run: echo "export LUNA_HOME=pyluna-common/tests/luna/common/testdata" >> $BASH_ENV
      - run: echo "export PYTHONPATH=.:src:pyluna-common:pyluna-radiology:pyluna-pathology" >> $BASH_ENV
      - run: export PYSPARK_PYTHON=`which python`
      - run: echo $PATH
      - run: python --version
      - run: pip --version
      - run: pip list
      - run: pip check
      - run:
          name: Run tests - pyluna-common
          command: |
            set -e
            COMMON_TEST_FILES=$(circleci tests glob "pyluna-common/tests/**/test_*.py" | circleci tests split --split-by=timings)
            pytest -v --capture=tee-sys --show-capture=all --cov=pyluna-common $COMMON_TEST_FILES --cov-report=xml
      - run:
          name: Run tests - pyluna-radiology
          command: |
            set -e
            RADIOLOGY_TEST_FILES=$(circleci tests glob "pyluna-radiology/tests/**/test_*.py" | circleci tests split --split-by=timings)
            pytest -v --capture=tee-sys --show-capture=all --cov=pyluna-radiology $RADIOLOGY_TEST_FILES --cov-report=xml --cov-append
      - run:
          name: Run tests - pyluna-pathology
          command: |
            set -e
            PATHOLOGY_TEST_FILES=$(circleci tests glob "pyluna-pathology/tests/**/test_*.py" | circleci tests split --split-by=timings)
            pytest -v --capture=tee-sys --show-capture=all --cov=pyluna-pathology $PATHOLOGY_TEST_FILES --cov-report=xml --cov-append
      - store_artifacts:
          path: htmlcov
      - codecov/upload:
          file: coverage.xml

  # https://circleci.com/docs/2.0/building-docker-images/
  docker_build:
    machine: true
    steps:
      - checkout
      - run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - run: docker build -t $DOCKER_USERNAME/luna-dev:latest ./docker/
      - run: docker push $DOCKER_USERNAME/luna-dev:latest

workflows:
  version: 2
  test:
    when: << pipeline.parameters.run_workflow_test >>
    jobs:
      - test:
          context:
            - MIND-Data-Processing

  build:
    when: << pipeline.parameters.run_workflow_docker >>
    jobs:
      - docker_build:
          context:
            - MIND-Data-Processing
